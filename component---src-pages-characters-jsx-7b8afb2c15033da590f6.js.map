{"version":3,"sources":["webpack:///./src/pages/characters.jsx"],"names":["Characters","useState","featuredCharacters","setFeaturedCharacters","fetchData","pageNumber","a","retrieveCharacters","data","fetchFeaturedCharacters","ids","retrieveMultipleCharacters","results","status","isNotEmptyArray","useEffect","index","push","Math","floor","process","random","title","className","map","character","key","id","image","link","name","retrieveData"],"mappings":"oOAkFeA,UAvEI,WACf,MAAoDC,mBAAS,IAAtDC,EAAP,KAA2BC,EAA3B,KAEMC,EAAS,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACKC,YAAmBF,GADxB,cACRG,EADQ,yBAGPA,GAHO,2CAAH,sDAMTC,EAAuB,uCAAG,WAAMC,GAAN,iBAAAJ,EAAA,sEACMK,YAC9BD,GAFwB,mBACpBE,EADoB,EACpBA,QAIO,MALa,EACXC,QAIMC,YAAgBF,GALX,iDAO5BT,EAAsBS,GAPM,2CAAH,sDAU7BG,qBAAU,WAIN,IAHA,IAAML,EAAM,GAGHM,EAAQ,EAAGA,EAAQ,EAAGA,IAC3BN,EAAIO,KACAC,KAAKC,MAEGC,MADJF,KAAKG,WAMjBZ,EAAwBC,KACzB,IAkBH,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKY,MAAM,oBACX,6BAASC,UAAU,cACf,yBAAKA,UAAU,sCACX,0BAAMA,UAAU,4BAAhB,wBAGA,yBAAKA,UAAU,2BAvBtBT,YAAgBZ,GAEdA,EAAmBsB,KAAI,SAAAC,GAC1B,OACI,kBAAC,IAAD,CACIC,IAAG,aAAeD,EAAUE,GAC5BA,GAAIF,EAAUE,GACdC,MAAOH,EAAUG,MACjBC,KAAK,YACLP,MAAOG,EAAUK,UAToB,kBAAC,WAAD,QA2BzC,yBAAKP,UAAU,mCACX,kBAAC,IAAD,CAAMM,KAAK,YAAYE,aAAc3B","file":"component---src-pages-characters-jsx-7b8afb2c15033da590f6.js","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport {\n    retrieveCharacters,\n    retrieveMultipleCharacters,\n} from '../services/characters';\nimport { isNotEmptyArray } from '../utils';\nimport Card from '../components/Card';\nimport Layout from '../components/Layout';\nimport List from '../components/List';\nimport SEO from '../components/seo';\n\nconst Characters = () => {\n    const [featuredCharacters, setFeaturedCharacters] = useState([]);\n\n    const fetchData = async pageNumber => {\n        const data = await retrieveCharacters(pageNumber);\n\n        return data;\n    };\n\n    const fetchFeaturedCharacters = async ids => {\n        const { results, status } = await retrieveMultipleCharacters(\n            ids\n        );\n\n        if (status !== 200 && !isNotEmptyArray(results)) return;\n\n        setFeaturedCharacters(results);\n    };\n\n    useEffect(() => {\n        const ids = [];\n\n        // eslint-disable-next-line no-plusplus\n        for (let index = 0; index < 4; index++) {\n            ids.push(\n                Math.floor(\n                    Math.random() *\n                        process.env.GATSBY_MAX_CHARACTERS_LENGTH\n                )\n            );\n        }\n\n        fetchFeaturedCharacters(ids);\n    }, []);\n\n    const renderFeaturedCharacters = () => {\n        if (!isNotEmptyArray(featuredCharacters)) return <Fragment />;\n\n        return featuredCharacters.map(character => {\n            return (\n                <Card\n                    key={`character-${character.id}`}\n                    id={character.id}\n                    image={character.image}\n                    link=\"character\"\n                    title={character.name}\n                />\n            );\n        });\n    };\n\n    return (\n        <Layout>\n            <SEO title=\"Characters List\" />\n            <section className=\"Characters\">\n                <div className=\"container-fluid FeaturedCharacters\">\n                    <span className=\"FeaturedCharacters-title\">\n                        Featured Characters:\n                    </span>\n                    <div className=\"FeaturedCharacters-list\">\n                        {renderFeaturedCharacters()}\n                    </div>\n                </div>\n                <div className=\"container-fluid Characters-list\">\n                    <List link=\"character\" retrieveData={fetchData} />\n                </div>\n            </section>\n        </Layout>\n    );\n};\n\nexport default Characters;\n"],"sourceRoot":""}
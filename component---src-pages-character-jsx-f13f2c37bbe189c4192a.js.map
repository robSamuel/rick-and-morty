{"version":3,"sources":["webpack:///./src/services/locations/index.js","webpack:///./src/services/episodes/index.js","webpack:///./src/components/Container/index.jsx","webpack:///./node_modules/reactstrap/es/Spinner.js","webpack:///./src/components/Loading/index.jsx","webpack:///./src/pages/character.jsx"],"names":["url","retrieveLocations","page","options","a","name","type","dimension","endpointURL","httpClient","method","data","status","pagination","info","results","error","retrieveLocationDetail","id","retrieveEpisodes","episode","urlEndpoint","retrieveMultipleEpisodes","episodesList","join","console","log","Container","children","className","props","cssModule","size","color","Tag","tag","attributes","classes","createElement","role","defaultProps","Loading","containerClass","style","INITIAL_VALUE","image","gender","species","Character","useState","setData","episodes","setEpisodes","isLoadingEpisodes","setIsLoadingEpisodes","isLoadingLocation","setIsLoadingLocation","location","setLocation","origin","setOrigin","isLoadingOrigin","setIsLoadingOrigin","state","params","useEffect","fetchData","retrieveCharacterDetails","newData","isLocationEqualToOrigin","fetchLocation","fetchEpisodes","retrievedEpisodes","isNotEmptyArray","list","map","retrieveIdFromURL","setInformation","setLoading","residentsCount","residents","length","renderLine","label","value","renderSpinner","renderLocation","loading","Layout","title","src","alt","List","inheritedList","link","listTitle","useList"],"mappings":"gNAEMA,EAAM,aAECC,EAAiB,uCAAG,WAAOC,EAAMC,GAAb,6BAAAC,EAAA,sEAAaD,MAAU,IAC5CE,GADqB,EACIF,GAAzBE,KAAMC,EADe,EACfA,KAAMC,EADS,EACTA,UAChBC,EAAiBR,EAFQ,SAEIE,EAE9BG,IACCG,EAAiBA,EAAN,SAA0BH,GAEtCC,IACCE,EAAiBA,EAAN,SAA0BF,GAEtCC,IACCC,EAAiBA,EAAN,cAA+BD,GAXjB,kBAcME,YAAW,CACtCC,OAAQ,MACRV,IAAKQ,IAhBgB,uBAcjBG,EAdiB,EAcjBA,KAAMC,EAdW,EAcXA,OAdW,kBAmBlB,CACHC,WAAYF,EAAKG,KACjBC,QAASJ,EAAKI,QACdH,WAtBqB,2DAyBlB,CAAEI,MAAK,OAzBW,0DAAH,wDA6BjBC,EAAsB,uCAAG,WAAOC,GAAP,qBAAAd,EAAA,6DAC5BI,EAD4B,GACXR,EAAMkB,EADK,kBAICT,YAAW,CACtCC,OAAQ,MACRV,IAAKQ,IANqB,uBAItBG,EAJsB,EAItBA,KAAMC,EAJgB,EAIhBA,OAJgB,kBASvB,CAAED,OAAMC,WATe,2DAWvB,CAAEI,MAAK,OAXgB,0DAAH,uD,uJC7BtBG,EAAgB,uCAAG,WAAOjB,EAAMC,GAAb,+BAAAC,EAAA,sEAAaD,MAAU,IAAvB,KAIxBA,GAFAE,YAFwB,MAEjB,GAFiB,MAGxBe,QAEAC,EAAiBrB,iBAAYE,EAE9BG,IACCgB,EAAiBA,EAAN,SAA0BhB,IALrCe,OAHwB,MAGd,EAHc,KAW5BC,EAAiBA,EAAN,YAA6BD,GAXZ,kBAcOX,YAAW,CACtCC,OAAQ,MACRV,IAAKqB,IAhBe,uBAchBV,EAdgB,EAchBA,KAAMC,EAdU,EAcVA,OAdU,kBAmBjB,CACHC,WAAYF,EAAKG,KACjBC,QAASJ,EAAKI,QACdH,WAtBoB,2DAyBjB,CAAEI,MAAK,OAzBU,0DAAH,wDA6BhBM,EAAwB,uCAAG,WAAOC,GAAP,qBAAAnB,EAAA,6DAC9BiB,EAAiBrB,YAAOuB,EAAaC,OAC3CC,QAAQC,IAAIL,GAFwB,kBAKDZ,YAAW,CACtCC,OAAQ,MACRV,IAAKqB,IAPuB,uBAKxBV,EALwB,EAKxBA,KAAMC,EALkB,EAKlBA,OAKda,QAAQC,IAAR,OAAoBf,GAVY,kBAWzB,CACHA,OACAC,WAb4B,yCAgBhCa,QAAQC,IAAR,MAhBgC,kBAiBzB,CAAEV,MAAK,OAjBkB,0DAAH,uD,mJChBtBW,EAdG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACVD,K,6FCIb,EAAU,SAAiBE,GAC7B,IAAID,EAAYC,EAAMD,UAClBE,EAAYD,EAAMC,UAClBzB,EAAOwB,EAAMxB,KACb0B,EAAOF,EAAME,KACbC,EAAQH,EAAMG,MACdL,EAAWE,EAAMF,SACjBM,EAAMJ,EAAMK,IACZC,EAAa,YAA8BN,EAAO,CAAC,YAAa,YAAa,OAAQ,OAAQ,QAAS,WAAY,QAElHO,EAAU,YAAgB,IAAWR,IAAWG,GAAO,WAAa1B,EAAO,IAAM0B,EAAc,WAAa1B,IAAM2B,GAAQ,QAAUA,GAAgBF,GACxJ,OAAoB,IAAMO,cAAcJ,EAAK,YAAS,CACpDK,KAAM,UACLH,EAAY,CACbP,UAAWQ,IACTT,GAAyB,IAAMU,cAAc,OAAQ,CACvDT,UAAW,YAAgB,UAAWE,IACrCH,KAGL,EAAQY,aA1BW,CACjBL,IAAK,MACL7B,KAAM,SACNsB,SAAU,cAwBG,QC5BTa,EAAU,SAAAX,GAAU,IAElBD,EAOAC,EAPAD,UACAD,EAMAE,EANAF,SACAK,EAKAH,EALAG,MACAS,EAIAZ,EAJAY,eACAV,EAGAF,EAHAE,KACAW,EAEAb,EAFAa,MACArC,EACAwB,EADAxB,KAGJ,OACI,yBACIuB,UAAWa,EACXC,MAAOA,GAEP,kBAAC,EAAD,CACId,UAAWA,EACXD,SAAUA,EACVK,MAAOA,EACPD,KAAMA,EACN1B,KAAMA,MAMtBmC,EAAQD,aAAe,CACnBZ,SAAU,GACVC,UAAW,GACXI,MAAO,OACPS,eAAgB,GAChBV,KAAM,KACNW,MAAO,GACPrC,KAAM,UAqBKmC,QC7CTG,EAAgB,CAClB1B,GAAI,EACJb,KAAM,GACNwC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTnC,OAAQ,GACRN,KAAM,IA0NK0C,UAvNG,SAAAlB,GAAU,IAAD,EACCmB,mBAASL,GAA1BjC,EADgB,KACVuC,EADU,OAESD,mBAAS,IAAlCE,EAFgB,KAENC,EAFM,OAG2BH,oBAAS,GAApDI,EAHgB,KAGGC,EAHH,OAI2BL,oBAAS,GAApDM,EAJgB,KAIGC,EAJH,OAKSP,mBAAS,IAAlCQ,EALgB,KAKNC,EALM,OAMKT,mBAAS,IAA9BU,EANgB,KAMRC,EANQ,OAOuBX,oBAAS,GAAhDY,EAPgB,KAOCC,EAPD,KAQHC,EAAoBjC,EAAhC2B,SAAYM,MAASC,EAAWlC,EAAXkC,OACvB9C,EAAK6C,EAAQA,EAAM7C,GAAK8C,EAAO9C,GAErC+C,qBAAU,WACH/C,GACCgD,EAAUhD,KACf,CAACA,IAEJ,IAAMgD,EAAS,uCAAG,WAAOhD,GAAP,uBAAAd,EAAA,6DACdoD,GAAqB,GACrBM,GAAmB,GAFL,SAIoBK,YAAyBjD,GAJ7C,mBAINH,EAJM,EAINA,QAASH,EAJH,EAIGA,OAEjBa,QAAQC,IAAId,EAAQG,GACN,MAAXH,GAAmBG,EAPR,mDAURqD,EAAU,CACZlD,GAAIH,EAAQG,GACZb,KAAMU,EAAQV,MAAQ,GACtBwC,MAAO9B,EAAQ8B,OAAS,GACxBC,OAAQ/B,EAAQ+B,QAAU,GAC1BC,QAAShC,EAAQgC,SAAW,GAC5BnC,OAAQG,EAAQH,QAAU,GAC1BN,KAAMS,EAAQT,MAAQ,IAEpB+D,EACFtD,EAAQ0C,SAASzD,MAAQe,EAAQ4C,OAAO3D,IAE5CkD,EAAQkB,GACRE,EACIvD,EAAQ0C,SACRC,EACAF,EACAa,GAGJE,EAAcxD,EAAQK,SAElBiD,GACAC,EAAcvD,EAAQ4C,OAAQC,EAAWE,GAjC/B,4CAAH,sDAoCTS,EAAa,uCAAG,WAAOC,GAAP,mBAAApE,EAAA,yDAClBkD,GAAqB,GAEjBmB,YAAgBD,GAHF,uBAIdlB,GAAqB,GAJP,iCASZoB,EAAOF,EACIG,KAAI,SAAAvD,GAAO,OAAIwD,YAAkBxD,MAVhC,SAYaE,YAAyBoD,GAZtC,mBAYV/D,EAZU,EAYVA,KAEM,MAdI,EAYJC,QAEQ6D,YAAgB9D,GAdpB,wBAedyC,EAAY,IACZE,GAAqB,GAhBP,2BAqBlBF,EAAYzC,GACZ2C,GAAqB,GAtBH,4CAAH,sDAyBbgB,EAAa,uCAAG,WAClBb,EACAoB,EACAC,EACAT,GAJkB,qBAAAjE,EAAA,kEAIlBiE,OAA0B,GAEtBZ,EANc,uBAOdqB,GAAW,GAPG,iCAWZ5D,EAAK0D,YAAkBnB,EAASzD,KAXpB,SAYaiB,YAAuBC,GAZpC,mBAYVP,EAZU,EAYVA,KAEM,MAdI,EAYJC,QAEQD,EAdJ,wBAedmE,GAAW,GAfG,2BAoBZV,EAAU,CACZlD,GAAIP,EAAKO,IAAM,EACfb,KAAMM,EAAKN,MAAQ,GACnBE,UAAWI,EAAKJ,WAAa,GAC7BwE,eAAgBpE,EAAKqE,UAAUC,QAAU,EACzC3E,KAAMK,EAAKL,MAAQ,IAGvBuE,EAAeT,GACfU,GAAW,GAERT,IACCT,EAAUQ,GACVN,GAAmB,IAjCL,4CAAH,4DAqCboB,EAAa,SAACC,EAAOC,GACvB,OAAIA,EAIA,6BACI,2BAAOvD,UAAU,0BACTsD,EADR,MAGA,0BAAMtD,UAAU,0BACXuD,IARF,kBAAC,WAAD,OAcTC,EAAgB,WAClB,OACI,kBAAC,EAAD,CACIxD,UAAU,oCACVa,eAAe,8CACfpC,KAAK,UAKXgF,EAAiB,SAACH,EAAOrE,EAAMyE,GACjC,OAAGA,EACQF,IAGP,kBAAC,WAAD,KACI,4BAAKF,GACL,6BACKD,EAAW,OAAQpE,EAAKT,MACxB6E,EAAW,YAAapE,EAAKP,WAC7B2E,EAAW,YAAapE,EAAKiE,gBAC7BG,EAAW,OAAQpE,EAAKR,SAoBzC,OACI,kBAACkF,EAAA,EAAD,KACI,kBAAC,IAAD,CAAKC,MAAM,sBACX,6BAAS5D,UAAU,oBACf,kBAAC,EAAD,KACQ,yBAAKA,UAAU,gEACX,yBACI6D,IAAK/E,EAAKkC,MACV8C,IAAKhF,EAAKN,QAGlB,yBAAKwB,UAAU,wDACX,6BACI,wBAAIA,UAAU,yBACTlB,EAAKN,MAEV,6BACK6E,EAAW,SAAUvE,EAAKC,QAC1BsE,EAAW,SAAUvE,EAAKmC,QAC1BoC,EAAW,UAAWvE,EAAKoC,SAC3BmC,EAAW,OAAQvE,EAAKL,SAIrC,yBAAKuB,UAAU,wCACX,yBAAKA,UAAU,8CACf,yBAAKA,UAAU,iDACX,yBAAKA,UAAU,sEACVyD,EAAe,SAAU3B,EAAQE,IAEtC,yBAAKhC,UAAU,sEACVyD,EAAe,WAAY7B,EAAUF,MAIlD,yBAAK1B,UAAU,aAhD5BwB,EACQgC,IAGP,kBAACO,EAAA,EAAD,CACIC,cAAe1C,EACf2C,KAAK,UACLC,UAAU,oCACVC,SAAS","file":"component---src-pages-character-jsx-f13f2c37bbe189c4192a.js","sourcesContent":["import { httpClient } from '../httpClient';\n\nconst url = '/location/';\n\nexport const retrieveLocations = async (page, options = {}) => {\n    const { name, type, dimension} = options;\n    let endpointURL = `${url}?page=${page}`;\n\n    if(name)\n        endpointURL = `${endpointURL}&name=${name}`;\n\n    if(type)\n        endpointURL = `${endpointURL}&type=${type}`;\n\n    if(dimension)\n        endpointURL = `${endpointURL}&dimension=${dimension}`;\n\n    try {\n        const { data, status } = await httpClient({\n            method: 'GET',\n            url: endpointURL,\n        });\n\n        return {\n            pagination: data.info,\n            results: data.results,\n            status\n        };\n    } catch (error) {\n        return { error };\n    }\n};\n\nexport const retrieveLocationDetail = async (id) => {\n    const endpointURL = `${url}${id}`;\n\n    try {\n        const { data, status } = await httpClient({\n            method: 'GET',\n            url: endpointURL\n        });\n\n        return { data, status };\n    } catch (error) {\n        return { error };\n    }\n}\n","import { httpClient } from '../httpClient';\n\nconst url = '/episode';\n\nexport const retrieveEpisodes = async (page, options = {}) => {\n    const {\n        name = '',\n        episode = 0\n    } = options;\n    let urlEndpoint = `${url}?page=${page}`;\n\n    if(name)\n        urlEndpoint = `${urlEndpoint}&name=${name}`;\n\n    if(episode)\n    urlEndpoint = `${urlEndpoint}&episode=${episode}`;\n\n    try {\n        const { data, status } = await httpClient({\n            method: 'GET',\n            url: urlEndpoint,\n        });\n\n        return {\n            pagination: data.info,\n            results: data.results,\n            status\n        };\n    } catch (error) {\n        return { error };\n    }\n};\n\nexport const retrieveMultipleEpisodes = async (episodesList) => {\n    const urlEndpoint = `${url}/${episodesList.join()}`;\n    console.log(urlEndpoint);\n\n    try {\n        const { data, status } = await httpClient({\n            method: 'GET',\n            url: urlEndpoint\n        });\n\n        console.log(`data`, data)\n        return {\n            data,\n            status\n        };\n    } catch (error) {\n        console.log(error);\n        return { error };\n    }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Container = ({ children }) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                {children}\n            </div>\n        </div>\n    );\n};\n\nContainer.propTypes = {\n    children: PropTypes.node.isRequired\n};\n\nexport default Container;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar defaultProps = {\n  tag: 'div',\n  type: 'border',\n  children: 'Loading...'\n};\n\nvar Spinner = function Spinner(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      type = props.type,\n      size = props.size,\n      color = props.color,\n      children = props.children,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"type\", \"size\", \"color\", \"children\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, size ? \"spinner-\" + type + \"-\" + size : false, \"spinner-\" + type, color ? \"text-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    role: \"status\"\n  }, attributes, {\n    className: classes\n  }), children && /*#__PURE__*/React.createElement(\"span\", {\n    className: mapToCssModules('sr-only', cssModule)\n  }, children));\n};\n\nSpinner.defaultProps = defaultProps;\nexport default Spinner;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Spinner } from 'reactstrap';\n\nconst Loading = props => {\n    const {\n        className,\n        children,\n        color,\n        containerClass,\n        size,\n        style,\n        type\n    } = props;\n\n    return (\n        <div\n            className={containerClass}\n            style={style}\n        >\n            <Spinner\n                className={className}\n                children={children}\n                color={color}\n                size={size}\n                type={type}\n            />\n        </div>\n    );\n};\n\nLoading.defaultProps = {\n    children: '',\n    className: '',\n    color: 'info',\n    containerClass: '',\n    size: 'md',\n    style: {},\n    type: 'border'\n};\n\nLoading.propTypes = {\n    children: PropTypes.string,\n    className: PropTypes.string,\n    color: PropTypes.oneOf([\n        'primary',\n        'secondary',\n        'success',\n        'danger',\n        'warning',\n        'info',\n        'light',\n        'dark']),\n    containerClass: PropTypes.string,\n    size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl']),\n    style: PropTypes.object,\n    type: PropTypes.oneOf(['border', 'grow'])\n};\n\nexport default Loading;\n","import React, { useState, useEffect, Fragment } from 'react';\nimport { retrieveCharacterDetails } from '../services/characters';\nimport { retrieveMultipleEpisodes } from '../services/episodes';\nimport { retrieveLocationDetail } from '../services/locations';\nimport {\n    isNotEmptyArray,\n    retrieveIdFromURL\n} from '../utils';\nimport Container from '../components/Container';\nimport Layout from '../components/Layout';\nimport List from '../components/List';\nimport SEO from '../components/seo';\nimport Spinner from '../components/Loading';\n\nconst INITIAL_VALUE = {\n    id: 0,\n    name: '',\n    image: '',\n    gender: '',\n    species: '',\n    status: '',\n    type: ''\n};\n\nconst Character = props => {\n    const [data, setData] = useState(INITIAL_VALUE);\n    const [episodes, setEpisodes] = useState([]);\n    const [isLoadingEpisodes, setIsLoadingEpisodes] = useState(false);\n    const [isLoadingLocation, setIsLoadingLocation] = useState(false);\n    const [location, setLocation] = useState({});\n    const [origin, setOrigin] = useState({});\n    const [isLoadingOrigin, setIsLoadingOrigin] = useState(false);\n    const { location: { state }, params } = props;\n    const id = state ? state.id : params.id;\n\n    useEffect(() => {\n        if(id)\n            fetchData(id);\n    }, [id]);\n\n    const fetchData = async (id) => {\n        setIsLoadingLocation(true);\n        setIsLoadingOrigin(true);\n\n        const { results, status } = await retrieveCharacterDetails(id);\n\n        console.log(status, results);\n        if(status !== 200 && !results)\n            return;\n\n        const newData = {\n            id: results.id,\n            name: results.name || '',\n            image: results.image || '',\n            gender: results.gender || '',\n            species: results.species || '',\n            status: results.status || '',\n            type: results.type || ''\n        };\n        const isLocationEqualToOrigin =\n            results.location.url === results.origin.url;\n\n        setData(newData);\n        fetchLocation(\n            results.location,\n            setLocation, \n            setIsLoadingLocation,\n            isLocationEqualToOrigin\n        );\n\n        fetchEpisodes(results.episode);\n\n        if(!isLocationEqualToOrigin)\n            fetchLocation(results.origin, setOrigin, setIsLoadingOrigin);\n    };\n\n    const fetchEpisodes = async (retrievedEpisodes) => {\n        setIsLoadingEpisodes(true);\n\n        if(!isNotEmptyArray(retrievedEpisodes)) {\n            setIsLoadingEpisodes(false);\n\n            return;\n        }\n\n        const list = retrievedEpisodes\n                        .map(episode => retrieveIdFromURL(episode));\n\n        const { data, status } = await retrieveMultipleEpisodes(list);\n\n        if(status !== 200 && !isNotEmptyArray(data)) {\n            setEpisodes([]);\n            setIsLoadingEpisodes(false);\n\n            return;\n        }\n\n        setEpisodes(data);\n        setIsLoadingEpisodes(false);\n    };\n\n    const fetchLocation = async (\n        location,\n        setInformation,\n        setLoading,\n        isLocationEqualToOrigin = false\n    ) => {\n        if(!location) {\n            setLoading(false);\n            return;\n        }\n\n        const id = retrieveIdFromURL(location.url);\n        const { data, status } = await retrieveLocationDetail(id);\n\n        if(status !== 200 && !data){\n            setLoading(false);\n\n            return; //TODO: Set something as default when no data is returned\n        }\n        \n        const newData = {\n            id: data.id || 0,\n            name: data.name || '',\n            dimension: data.dimension || '',\n            residentsCount: data.residents.length || 0,\n            type: data.type || ''\n        };\n\n        setInformation(newData);\n        setLoading(false);\n\n        if(isLocationEqualToOrigin) {\n            setOrigin(newData);\n            setIsLoadingOrigin(false);\n        }\n    };\n\n    const renderLine = (label, value) => {\n        if(!value)\n            return <Fragment />;\n\n        return (\n            <div>\n                <label className=\"CharacterDetails-label\">\n                    {`${label}: `}\n                </label>\n                <span className=\"CharacterDetails-value\">\n                    {value}\n                </span>\n            </div>\n        )\n    };\n\n    const renderSpinner = () => {\n        return (\n            <Spinner\n                className=\"CharacterDetails-location-spinner\"\n                containerClass=\"CharacterDetails-location-spinner-container\"\n                type=\"grow\"\n            />\n        );\n    }\n\n    const renderLocation = (label, info, loading) => {\n        if(loading)\n            return renderSpinner();\n\n        return (\n            <Fragment>\n                <h3>{label}</h3>\n                <div>\n                    {renderLine('Name', info.name)}\n                    {renderLine('Dimension', info.dimension)}\n                    {renderLine('Residents', info.residentsCount)}\n                    {renderLine('Type', info.type)}\n                </div>\n            </Fragment>\n        );\n    };\n\n    const renderEpisodes = () => {\n        if(isLoadingEpisodes)\n            return renderSpinner();\n\n        return (\n            <List\n                inheritedList={episodes}\n                link=\"episode\"\n                listTitle=\"Episodes featuring this character\"\n                useList={true}\n            />\n        )\n    };\n\n    return (\n        <Layout>\n            <SEO title=\"Character Details\" />\n            <section className=\"CharacterDetails\">\n                <Container>\n                        <div className=\"d-flex justify-content-center col-md-6 col-sm-12 margin-auto\">\n                            <img\n                                src={data.image}\n                                alt={data.name}\n                            />\n                        </div>\n                        <div className=\"CharacterDetails-info col-md-6 col-sm-12 margin-auto\">\n                            <div>\n                                <h2 className=\"CharacterDetails-name\">\n                                    {data.name}\n                                </h2>\n                                <div>\n                                    {renderLine('Status', data.status)}\n                                    {renderLine('Gender', data.gender)}\n                                    {renderLine('Species', data.species)}\n                                    {renderLine('Type', data.type)}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"d-flex flex-column-sm col-sm-12 pt-3\">\n                            <div className=\"col-lg-6 CharacterDetails-empty-container\" />\n                            <div className=\"d-flex flex-column-sm px-0 col-lg-6 col-md-12\">\n                                <div className=\"CharacterDetails-location-container col-md-6 col-sm-12 margin-auto\">\n                                    {renderLocation('Origin', origin, isLoadingOrigin)}\n                                </div>\n                                <div className=\"CharacterDetails-location-container col-md-6 col-sm-12 margin-auto\">\n                                    {renderLocation('Location', location, isLoadingLocation)}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-sm-12\">\n                            {renderEpisodes()}\n                        </div>\n                </Container>\n            </section>\n        </Layout>\n    );\n};\n\nexport default Character;\n"],"sourceRoot":""}